---
version: "3.8"

volumes:
#  esdata01:
#    driver: local
  grafana-storage:

networks:
  default:
    # name: k6-playground-monitoring
    external: false

configs:
  collector_conf:
    file: ./confs/collector.yml

services:
  otel-collector:
    deploy:
      resources:
        limits:
          memory: 125M
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318"          # OTLP over HTTP receiver
    # https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
    image: otel/opentelemetry-collector-contrib:0.88.0
    configs:
      - source: collector_conf
        target: /conf/collector.yml
    command: ["--config=/conf/collector.yml"]
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute
    environment:
      # lightstep stuff
      - LS_ACCESS_TOKEN=${LS_ACCESS_TOKEN}
      # new relic stuff
      # https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/install-configure-remote-write/set-your-prometheus-remote-write-integration/
      - PROMETHEUS_CLUSTER_NAME="k6-playground-prometheus"
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    volumes:
      - /:/hostfs
      - "/var/run/docker.sock.raw:/var/run/docker.sock"

  k6:
    image: grafana/k6:0.47.0
    command:
      - run
      - /scripts/02-web-service-stages.js
      - -o
      - experimental-prometheus-rw
#    networks:
#      - monitoring
    ports:
      - "6565:6565"
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
    volumes:
      - ./02-web-service-stages.js:/scripts/02-web-service-stages.js

  grafana:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.127.0.0.1.nip.io`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.entrypoints=web"
    # https://hub.docker.com/r/grafana/grafana/tags
    image: grafana/grafana:latest
#    networks:
#      - monitoring
    ports:
      - "3000:3000"
    environment:
    # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_DATE_FORMATS_DEFAULT_TIMEZONE=browser
      - GF_ALLOW_LOADING_UNSIGNED_PLUGINS=servicenow-cloudobservability-datasource
#      - GF_LOG_LEVEL=debug
#      - GF_DEFAULT_APP_MODE=development
      - GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS=otel-collector:4317
#      tracing.opentelemetry.otlp:
#        address: jaeger-operator-jaeger-collector.jaeger-system.svc:4317
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./dist:/var/lib/grafana/plugins
      #      - ./dashboards:/var/lib/grafana/dashboards
#        - ./provisioning:/etc/grafana/provisioning
#      - ./grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml

  prometheus:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.127.0.0.1.nip.io`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.entrypoints=web"
    image: prom/prometheus:v2.47.2
    command:
#      - '--log.level=debug'
      - '--enable-feature=remote-write-receiver'
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
#    networks:
#      - monitoring
    ports:
      - "9090:9090"

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.pressure'
      - '--collector.filesystem.ignored-mount-points'
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
#    network_mode: host
#    pid: host
#    networks:
#      - back-tier
    restart: always

  traefik:
    image: "traefik:v3.0" # v2.10
    # container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
      - "--tracing=true"
      - "--tracing.openTelemetry.address=otel-collector:4317"
      - "--tracing.openTelemetry.insecure=true"
      - "--tracing.openTelemetry.grpc=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  parca:
    image: ghcr.io/parca-dev/parca:v0.20.0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.parca.rule=Host(`parca.127.0.0.1.nip.io`)"
      - "traefik.http.services.parca.loadbalancer.server.port=7070"
      - "traefik.http.routers.parca.entrypoints=web"
    ports:
      - "7070:7070"
    volumes:
      - "./confs/parca.yaml:/etc/parca/parca.yaml"
    command:
      - "/parca"
      - "--config-path=/etc/parca/parca.yaml"

  #  docker run --rm -it --privileged --pid host ghcr.io/parca-dev/parca-agent:v0.27.0 /bin/parca-agent --node=docker-test
  parca-agent:
    image: ghcr.io/parca-dev/parca-agent:v0.27.0
    pid: host
    privileged: true
    command:
      - parca-agent
#      - "--log-level=debug"
      - --log-level=info
      - --node=localhost-test
      - --remote-store-address=parca:7070
      - --remote-store-insecure
    ports:
      - "7071:7071"
    volumes:
      - "/var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket"
      - /run:/run
      - /tmp:/tmp
      - /lib/modules:/lib/modules
      - /sys/fs/cgroup:/sys/fs/cgroup
      - /sys/fs/bpf:/sys/fs/bpf
      - /sys/kernel/debug:/sys/kernel/debug

  parca-demo:
    image: quay.io/polarsignals/pprof-example-app-go:v0.1.0



